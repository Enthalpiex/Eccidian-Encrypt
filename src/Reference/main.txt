/*
import { Plugin, Notice, TFile } from "obsidian";
import { encryptWithPassword, decryptWithPassword } from "./encryption/aesWithPassword";
import { PasswordModal } from "./ui/passwordModal";

export default class EccEncryptPlugin extends Plugin {
  async onload() {
    this.addCommand({
      id: "encrypt-decrypt",
      name: "Encrypt/Decrypt Note",
      callback: async () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile instanceof TFile) {
          const fileContent = await this.app.vault.read(activeFile);

          new PasswordModal(this.app, async (password) => {
            try {
              if (fileContent.includes("%%ENC")) {
                const saltMatch = fileContent.match(/SALT:(.+)/);
                const ivMatch = fileContent.match(/IV:(.+)/);
                const dataMatch = fileContent.match(/DATA:(.+)/);

                if (saltMatch && ivMatch && dataMatch) {
                  const decrypted = await decryptWithPassword(
                    password,
                    saltMatch[1],
                    ivMatch[1],
                    dataMatch[1]
                  );
                  await this.app.vault.modify(activeFile, decrypted);
                  new Notice("Note decrypted.");
                }
              } else {
                const { salt, iv, data } = await encryptWithPassword(password, fileContent);
                const encrypted = `%%ENC\nSALT:${salt}\nIV:${iv}\nDATA:${data}`;
                await this.app.vault.modify(activeFile, encrypted);
                new Notice("Note encrypted.");
              }
            } catch (err) {
              console.error(err);
              new Notice("Failed to process note.");
            }
          }).open();
        }
      },
    });
  }
}
*/